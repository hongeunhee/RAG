'''이 코드는 Hugging Face의 Transformers 라이브러리를 사용하여 LangChain을 이용하여 YouTube 비디오 클립에 대한 질문 응답을 수행합니다. 
이 코드를 실행하기 전에 먼저 Transformers 라이브러리를 설치해야 합니다.'''
!pip install google-api-python-client google-auth-oauthlib transformers
from googleapiclient.discovery import build
from google_auth_oauthlib.flow import InstalledAppFlow
from transformers import pipeline

# YouTube API 관련 설정
API_SERVICE_NAME = "youtube"
API_VERSION = "v3"
CLIENT_SECRETS_FILE = "client_secret.json"
SCOPES = ["https://www.googleapis.com/auth/youtube.readonly"]

# YouTube API 인증
flow = InstalledAppFlow.from_client_secrets_file(CLIENT_SECRETS_FILE, SCOPES)
credentials = flow.run_console()
youtube = build(API_SERVICE_NAME, API_VERSION, credentials=credentials)

# LangChain을 사용하여 질문 응답 모델을 불러옵니다.
qa_pipeline = pipeline("question-answering", model="mrm8488/bert-multi-cased-finetuned-xquadv1", tokenizer="mrm8488/bert-multi-cased-finetuned-xquadv1")

def get_video_subtitles(video_id):
    # YouTube API를 사용하여 비디오 클립에서 자막을 추출합니다.
    captions = youtube.captions().list(part="snippet", videoId=video_id).execute()
    if captions["items"]:
        caption_id = captions["items"][0]["id"]
        subtitle_text = youtube.captions().download(id=caption_id).execute()
        return subtitle_text["body"]
    else:
        return None

def main():
    # YouTube 비디오 클립 ID 입력
    video_id = input("Enter YouTube video ID: ")
    
    # YouTube 비디오 클립에서 자막을 추출합니다.
    subtitle_text = get_video_subtitles(video_id)
    if subtitle_text:
        # 사용자로부터 질문을 입력받습니다.
        question = input("Enter your question: ")
        
        # LangChain을 사용하여 질문에 대한 답변을 추출합니다.
        answer = qa_pipeline(question=question, context=subtitle_text)
        
        # 추출된 답변을 출력합니다.
        print("Answer:", answer["answer"])
    else:
        print("Subtitles not available for this video.")

if __name__ == "__main__":
    main()
